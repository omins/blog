---
import BaseLayout from "@/layouts/BaseLayout.astro";
import PostMeta from "@/components/PostMeta.astro";
import { DEFAULT_LOCALE, SUPPORTED_LOCALES, type Locale } from "@/config/locales";
import { buildSlugIndex, getPostByLocaleSlug } from "@/lib/content/posts";

export const prerender = true;

export async function getStaticPaths() {
  const index = await buildSlugIndex();
  const paths: { params: { lang: Locale; slug: string } }[] = [];
  for (const [slug, localeMap] of Object.entries(index)) {
    for (const locale of Object.keys(localeMap) as Locale[]) {
      paths.push({ params: { lang: locale, slug } });
    }
  }
  return paths;
}

const slugParam = Astro.params.slug;
const langParam = Astro.params.lang;

if (!slugParam) {
  return Astro.redirect("/404");
}

const locale = SUPPORTED_LOCALES.includes(langParam as Locale)
  ? (langParam as Locale)
  : DEFAULT_LOCALE;

const slugIndex = await buildSlugIndex();
const entrySet = slugIndex[slugParam];

if (!entrySet) {
  return Astro.redirect("/404");
}

const post = await getPostByLocaleSlug(locale, slugParam);

if (!post) {
  return Astro.redirect(
    `/${(Object.keys(entrySet) as Locale[])[0] ?? DEFAULT_LOCALE}/posts/${slugParam}`
  );
}

const { Content } = await post.entry.render();
const availableLocales = Object.keys(entrySet) as Locale[];
const localeLinks = availableLocales.reduce<Record<Locale, string | undefined>>(
  (acc, candidate) => {
    acc[candidate] = `/${candidate}/posts/${slugParam}`;
    return acc;
  },
  {} as Record<Locale, string | undefined>
);
---

<BaseLayout
  title={post.entry.data.title}
  description={post.entry.data.description}
  locale={locale}
  localeLinks={localeLinks}
>
  <article class="mx-auto max-w-3xl px-4 py-12 sm:px-6 lg:px-8">
    <header class="mb-10 space-y-6">
      <div class="space-y-3 text-center">
        <p class="text-sm uppercase tracking-widest text-accent-soft dark:text-accent">
          {post.entry.data.category}
        </p>
        <h1 class="text-4xl font-semibold tracking-tight text-text-light dark:text-text-dark">
          {post.entry.data.title}
        </h1>
        {
          post.entry.data.description && (
            <p class="text-base text-slate-600 dark:text-slate-300">
              {post.entry.data.description}
            </p>
          )
        }
      </div>
      <PostMeta post={post} availableLocales={availableLocales} />
    </header>
    <section class="prose prose-slate max-w-none dark:prose-invert">
      <Content />
    </section>
  </article>
</BaseLayout>
