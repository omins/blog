---
import { DEFAULT_LOCALE, type Locale } from "@/config/locales";
import { THEME_OPTIONS } from "@/lib/theme";
import { getTranslator } from "@/lib/i18n/translator";

interface Props {
  locale?: Locale;
}

const { locale = DEFAULT_LOCALE } = Astro.props as Props;
const t = await getTranslator(locale);

const options = THEME_OPTIONS;
---

<div
  data-theme-toggle
  class="flex items-center gap-0.5 rounded-md border border-slate-300/50 bg-white/80 p-0.5 backdrop-blur-sm transition-colors dark:border-slate-700/50 dark:bg-slate-800/80"
>
  <button
    type="button"
    data-theme-option="light"
    class="flex h-7 w-7 items-center justify-center rounded text-slate-400 transition-all hover:text-slate-600 dark:hover:text-slate-300"
    aria-label={t("themeToggle.light")}
    aria-pressed="false"
  >
    <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
      ></path>
    </svg>
  </button>
  <button
    type="button"
    data-theme-option="dark"
    class="flex h-7 w-7 items-center justify-center rounded text-slate-400 transition-all hover:text-slate-600 dark:hover:text-slate-300"
    aria-label={t("themeToggle.dark")}
    aria-pressed="false"
  >
    <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
      ></path>
    </svg>
  </button>
  <button
    type="button"
    data-theme-option="system"
    class="flex h-7 w-7 items-center justify-center rounded text-slate-400 transition-all hover:text-slate-600 dark:hover:text-slate-300"
    aria-label={t("themeToggle.system")}
    aria-pressed="false"
  >
    <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
      ></path>
    </svg>
  </button>
</div>
<script is:inline define:vars={{ THEMES: options }}>
  (function () {
    const script = document.currentScript;
    const root = script ? script.previousElementSibling : null;
    if (!(root instanceof HTMLElement)) {
      return;
    }

    const buttons = Array.from(root.querySelectorAll("[data-theme-option]"));

    const getPreferredTheme = () => {
      if (window.__getPreferredTheme) {
        return window.__getPreferredTheme();
      }
      return THEMES[THEMES.length - 1] ?? "system";
    };

    const setPreferredTheme = (theme) => {
      if (!window.__setPreferredTheme) return;
      window.__setPreferredTheme(theme);
    };

    const setActiveState = (targetTheme) => {
      buttons.forEach((button) => {
        const theme = button.dataset.themeOption;
        const isActive = theme === targetTheme;
        button.setAttribute("aria-pressed", isActive ? "true" : "false");

        if (isActive) {
          button.classList.add(
            "bg-slate-200",
            "text-slate-900",
            "dark:bg-slate-700",
            "dark:text-white"
          );
          button.classList.remove("text-slate-400");
        } else {
          button.classList.remove(
            "bg-slate-200",
            "text-slate-900",
            "dark:bg-slate-700",
            "dark:text-white"
          );
          button.classList.add("text-slate-400");
        }
      });
    };

    const sync = () => {
      const active = getPreferredTheme();
      setActiveState(active);
    };

    buttons.forEach((button) => {
      button.addEventListener("click", () => {
        const theme = button.dataset.themeOption;
        if (!theme) return;
        setPreferredTheme(theme);
        sync();
      });
    });

    sync();
  })();
</script>
